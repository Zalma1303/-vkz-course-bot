# handlers/payment.py

from aiogram import Router, F
from aiogram.types import (
    Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
)
from db import log_purchase
from config import ADMIN_IDS, COURSES
from handlers.start import user_selected_course  # –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—ã–±–æ—Ä –∫—É—Ä—Å–∞

router = Router()

# –í—Ä–µ–º–µ–Ω–Ω–æ —Ö—Ä–∞–Ω–∏–º ID ‚Üí —Ñ–∞–π–ª —á–µ–∫–∞
user_pending_payments = {}

@router.message(F.photo | F.document)
async def handle_payment_proof(message: Message):
    user_id = message.from_user.id
    file_id = (
        message.photo[-1].file_id if message.photo else message.document.file_id
    )

    # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —á–µ–∫
    user_pending_payments[user_id] = file_id

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"approve:{user_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject:{user_id}")
        ]
    ])

    for admin_id in ADMIN_IDS:
        await message.bot.send_message(
            admin_id,
            f"üì© –ù–æ–≤—ã–π —á–µ–∫ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{message.from_user.username or user_id}\n"
            f"User ID: <code>{user_id}</code>",
            reply_markup=kb
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —á–µ–∫–∞
        if message.photo:
            await message.bot.send_photo(admin_id, file_id)
        else:
            await message.bot.send_document(admin_id, file_id)

    await message.reply("‚úÖ –ß–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")


@router.callback_query(F.data.startswith("approve:"))
async def approve_access(callback: CallbackQuery):
    user_id = int(callback.data.split(":")[1])

    course_name, lang = user_selected_course.get(user_id, (None, None))

    if course_name and lang:
        link = COURSES[course_name][lang]["link"]
        
        await log_purchase(
    user_id=user_id,
    username=callback.from_user.username or "no_username",
    course=course_name,
    lang=lang,
    confirmed_by=callback.from_user.username or "admin"
)
        await callback.bot.send_message(
            user_id,
            f"‚úÖ –í–∞—à –ø–ª–∞—Ç—ë–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!\n\n"
            f"<b>{course_name} ({lang})</b>\n"
            f"–í–æ—Ç –≤–∞—à–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫—É—Ä—Å: {link}"
        )
    else:
        await callback.bot.send_message(
            user_id,
            "‚ö†Ô∏è –ü–ª–∞—Ç—ë–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫—É—Ä—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."
        )

    await callback.message.edit_text("–ü–ª–∞—Ç—ë–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω ‚úÖ")
    await callback.answer()


@router.callback_query(F.data.startswith("reject:"))
async def reject_access(callback: CallbackQuery):
    user_id = int(callback.data.split(":")[1])

    await callback.bot.send_message(
        user_id,
        "‚ùå –í–∞—à —á–µ–∫ –±—ã–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –æ–ø–ª–∞—Ç—É –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
    )

    await callback.message.edit_text("–ß–µ–∫ –æ—Ç–∫–ª–æ–Ω—ë–Ω ‚ùå")
    await callback.answer()